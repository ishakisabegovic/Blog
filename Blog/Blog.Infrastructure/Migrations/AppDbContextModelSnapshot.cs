// <auto-generated />
using System;
using Blog.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blog.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Blog.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "Great post.",
                            CreatedAt = new DateTime(2022, 12, 5, 17, 57, 27, 369, DateTimeKind.Local).AddTicks(1291),
                            PostId = 1
                        },
                        new
                        {
                            Id = 2,
                            Body = "Great post 2.",
                            CreatedAt = new DateTime(2022, 12, 5, 17, 57, 27, 369, DateTimeKind.Local).AddTicks(1296),
                            PostId = 2
                        });
                });

            modelBuilder.Entity("Blog.Core.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "The app is simple to use, and will help you decide on your best furniture fit.",
                            CreatedAt = new DateTime(2022, 12, 5, 17, 57, 27, 369, DateTimeKind.Local).AddTicks(999),
                            Description = "Rubicon Software Development and Gazzda furniture are proud to launch an augmented reality app.",
                            Slug = "augmented-reality-ios-application",
                            Title = "Augmented Reality iOS Application"
                        },
                        new
                        {
                            Id = 2,
                            Body = "The app is simple to use, and will help you decide on your best furniture fit.",
                            CreatedAt = new DateTime(2022, 12, 5, 17, 57, 27, 369, DateTimeKind.Local).AddTicks(1037),
                            Description = "Rubicon Software Development and Gazzda furniture are proud to launch an augmented reality app.",
                            Slug = "augmented-reality-ios-application-2",
                            Title = "Augmented Reality iOS Application 2"
                        });
                });

            modelBuilder.Entity("Blog.Core.Entities.PostTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 12, 5, 17, 57, 27, 369, DateTimeKind.Local).AddTicks(1374),
                            PostId = 1,
                            TagId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 12, 5, 17, 57, 27, 369, DateTimeKind.Local).AddTicks(1379),
                            PostId = 1,
                            TagId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 12, 5, 17, 57, 27, 369, DateTimeKind.Local).AddTicks(1381),
                            PostId = 1,
                            TagId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 12, 5, 17, 57, 27, 369, DateTimeKind.Local).AddTicks(1384),
                            PostId = 2,
                            TagId = 6
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 12, 5, 17, 57, 27, 369, DateTimeKind.Local).AddTicks(1386),
                            PostId = 2,
                            TagId = 4
                        });
                });

            modelBuilder.Entity("Blog.Core.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 12, 5, 17, 57, 27, 369, DateTimeKind.Local).AddTicks(2582),
                            Title = "iOS"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 12, 5, 17, 57, 27, 369, DateTimeKind.Local).AddTicks(2595),
                            Title = "Android"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 12, 5, 17, 57, 27, 369, DateTimeKind.Local).AddTicks(2598),
                            Title = "Trends"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 12, 5, 17, 57, 27, 369, DateTimeKind.Local).AddTicks(2600),
                            Title = "innovation"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 12, 5, 17, 57, 27, 369, DateTimeKind.Local).AddTicks(2602),
                            Title = "AR"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 12, 5, 17, 57, 27, 369, DateTimeKind.Local).AddTicks(2605),
                            Title = "Gazzda"
                        });
                });

            modelBuilder.Entity("Blog.Core.Entities.Comment", b =>
                {
                    b.HasOne("Blog.Core.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Blog.Core.Entities.PostTag", b =>
                {
                    b.HasOne("Blog.Core.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Core.Entities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Blog.Core.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("Blog.Core.Entities.Tag", b =>
                {
                    b.Navigation("PostTags");
                });
#pragma warning restore 612, 618
        }
    }
}
